{
    "version": "https://jsonfeed.org/version/1",
    "title": "九奏Kanano",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/01/14/%E3%80%90Godot%E3%80%914%E3%80%81%E7%89%A9%E7%90%86%E7%B3%BB%E7%BB%9F/",
            "url": "http://example.com/2023/01/14/%E3%80%90Godot%E3%80%914%E3%80%81%E7%89%A9%E7%90%86%E7%B3%BB%E7%BB%9F/",
            "title": "【Godot】4、物理系统",
            "date_published": "2023-01-14T01:48:00.000Z",
            "content_html": "<h1 id=\"godot中的物理系统\"><a class=\"markdownIt-Anchor\" href=\"#godot中的物理系统\">#</a> 🔵Godot 中的物理系统</h1>\n<blockquote>\n<p>🔹用一句话总结物理系统，就是模拟真实世界的碰撞</p>\n<p>🔹Godot 的物理系统提供了组件化工作流程，目前有工体、碰撞组件以及触发和碰撞事件</p>\n</blockquote>\n<hr>\n<h1 id=\"刚体\"><a class=\"markdownIt-Anchor\" href=\"#刚体\">#</a> 🔵刚体</h1>\n<blockquote>\n<p>🔹刚体是组成物理世界的基本对象，可以理解为一个不能看到（绘制）也不能摸到（碰撞）的带有属性的物体</p>\n</blockquote>\n<h2 id=\"area2d节点\"><a class=\"markdownIt-Anchor\" href=\"#area2d节点\">#</a> 🔷Area2D 节点</h2>\n<blockquote>\n<p>🔹Area2D 节点是一块可以检测物体碰撞的区域，但自身不会做出任何动作</p>\n</blockquote>\n<h2 id=\"rigibody2d节点\"><a class=\"markdownIt-Anchor\" href=\"#rigibody2d节点\">#</a> 🔷RigiBody2D 节点</h2>\n<blockquote>\n<p>🔹RigiBody2D 是动态刚体，有质量，可以设置速度，会受到重力影响</p>\n<p>🔹RigiBody2D 必须得拥有一个形状，这需要 Collision2D 节点或者 CollisionPolygon2D（多边形）节点</p>\n<p>🔹RigiBody2D 有如下常用属性：</p>\n<ul>\n<li>\n<h2 id=\"mode刚体类型\"><a class=\"markdownIt-Anchor\" href=\"#mode刚体类型\">#</a> <strong>mode</strong>：刚体类型：</h2>\n</li>\n<li><strong>mass</strong>：刚体质量</li>\n<li><strong>weight</strong>：刚体加速度</li>\n<li><strong>linear - velocity</strong>：移动速度</li>\n<li><strong>angular - velocity</strong>：旋转速度</li>\n<li><strong>applied - forces</strong>：施加的力</li>\n<li><strong>torque</strong>：扭矩</li>\n<li><strong>damp</strong>：衰减系数，当数值为正数时候速度随时间流逝变慢，反之加快，当数值为 0 时物体呈匀速运动</li>\n</ul>\n</blockquote>\n<h2 id=\"characterbody节点\"><a class=\"markdownIt-Anchor\" href=\"#characterbody节点\">#</a> 🔷CharacterBody 节点</h2>\n<blockquote>\n<p>🔹CharacterBody 是运动刚体，没有质量，不受重力影响，可以设置速度来进行移动</p>\n</blockquote>\n<h2 id=\"staticbody节点\"><a class=\"markdownIt-Anchor\" href=\"#staticbody节点\">#</a> 🔷StaticBody 节点</h2>\n<blockquote>\n<p>🔹Staic 是静态刚体，没有质量和速度，但是可以设置他的位置进行移动</p>\n</blockquote>\n",
            "tags": [
                "Godot",
                "笔记"
            ]
        },
        {
            "id": "http://example.com/2023/01/07/%E3%80%90Godot%E3%80%913%E3%80%81%E8%84%9A%E6%9C%AC/",
            "url": "http://example.com/2023/01/07/%E3%80%90Godot%E3%80%913%E3%80%81%E8%84%9A%E6%9C%AC/",
            "title": "【Godot】3、脚本",
            "date_published": "2023-01-07T04:00:00.000Z",
            "content_html": "<div class=\"note info flat\"><p>文章会持续更新，最近更新时间为：2023/01/14</p>\n</div>\n<h1 id=\"gds的数据类型\"><a class=\"markdownIt-Anchor\" href=\"#gds的数据类型\">#</a> 🔵GDS 的数据类型</h1>\n<blockquote>\n<p>🔷<strong>bool</strong>：布尔值，默认为 false</p>\n<p>🔷<strong>int</strong>：整数，范围为：-2<sup>64</sup> ~ 2<sup>64</sup>-1 默认为 0</p>\n<p>🔷<strong>float</strong>：浮点，默认为 0</p>\n<p>🔷<strong>String</strong>：字符串，默认为 Null</p>\n<p>🔷<strong>Array</strong>：数组</p>\n<p>🔷<strong>Object</strong>：对象</p>\n<p>🔷<strong>null</strong>：无，空</p>\n</blockquote>\n<hr>\n<h1 id=\"变量相关\"><a class=\"markdownIt-Anchor\" href=\"#变量相关\">#</a> 🔵变量相关</h1>\n<h2 id=\"运算符\"><a class=\"markdownIt-Anchor\" href=\"#运算符\">#</a> 🔷运算符</h2>\n<blockquote>\n<p>🔹算数运算符</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>含义</th>\n<th>示例</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>加法</td>\n<td>x=1+1</td>\n<td>x=2</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减法</td>\n<td>x=1-1</td>\n<td>x=0</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘法</td>\n<td>x=2*2</td>\n<td>x=4</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除法</td>\n<td>x=4/2</td>\n<td>x=2</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取余数</td>\n<td>x=5%2</td>\n<td>x=1</td>\n</tr>\n</tbody>\n</table>\n<p>🔹赋值运算符</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>含义</th>\n<th>示例</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=</td>\n<td>直接赋值</td>\n<td>x=1</td>\n<td>x=1</td>\n</tr>\n<tr>\n<td>+=</td>\n<td>x=x+</td>\n<td>x+=1</td>\n<td>x=2</td>\n</tr>\n<tr>\n<td>-=</td>\n<td>x=x-</td>\n<td>x-=1</td>\n<td>x=0</td>\n</tr>\n<tr>\n<td>/=</td>\n<td>x=x/</td>\n<td>x/=1</td>\n<td>x=1</td>\n</tr>\n<tr>\n<td>%=</td>\n<td>x=x%</td>\n<td>x%=1</td>\n<td>x=0</td>\n</tr>\n</tbody>\n</table>\n<p>🔹比较运算符</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>含义</th>\n<th>示例</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>==</td>\n<td>等于</td>\n<td>x==1</td>\n<td>true</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不等于</td>\n<td>x!=0</td>\n<td>true</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n<td>x&gt;1</td>\n<td>false</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n<td>x&lt;2</td>\n<td>true</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于等于</td>\n<td>x&gt;=1</td>\n<td>true</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于</td>\n<td>x&lt;=2</td>\n<td>true</td>\n</tr>\n</tbody>\n</table>\n<p>🔹逻辑运算符</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>含义</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&amp;&amp;</td>\n<td>且</td>\n<td>(x&lt;10 &amp;&amp; y &gt; 1)</td>\n</tr>\n<tr>\n<td>||</td>\n<td>或者</td>\n<td>(x==1 || y&gt;=5)</td>\n</tr>\n<tr>\n<td>!</td>\n<td>不是</td>\n<td>!(x==y)</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<h2 id=\"变量的导出\"><a class=\"markdownIt-Anchor\" href=\"#变量的导出\">#</a> 🔷变量的导出</h2>\n<blockquote>\n<p>🔹将变量导出， 可以让我们直接在编辑器外部更改变量而不用编辑脚本</p>\n<p>🔹导出变量的语法为：（4.0 语法）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@export var 变量名:变量类型</span><br></pre></td></tr></table></figure>\n<p>🔹导出的变量类型：</p>\n<table>\n<thead>\n<tr>\n<th>变量类型</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>String</td>\n<td>字符串</td>\n</tr>\n<tr>\n<td>NodePath</td>\n<td>节点路径</td>\n</tr>\n<tr>\n<td>Resource</td>\n<td>资源文件路径</td>\n</tr>\n<tr>\n<td>Colur</td>\n<td>颜色</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 导出一个数字</span><br><span class=\"line\">@export var a = 1</span><br><span class=\"line\"># 导出一个字符串</span><br><span class=\"line\">@export var b:String</span><br><span class=\"line\"># 导出一个节点路径</span><br><span class=\"line\">@export var c:NodePath</span><br><span class=\"line\"># 导出一个txt文件路径</span><br><span class=\"line\">@export_global_file(&quot;*.txt&quot;) var d: String</span><br><span class=\"line\"># 导出一个资源文件路径</span><br><span class=\"line\">@export var e:Resource</span><br><span class=\"line\"></span><br><span class=\"line\"># 在Godot编辑器中按住Ctrl单击@export即可查看更多</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"常量和静态方法\"><a class=\"markdownIt-Anchor\" href=\"#常量和静态方法\">#</a> 🔷常量和静态方法</h2>\n<blockquote>\n<p>🔹常量无法更改，尝试修改的话会报错</p>\n<p>🔹常量的声明语句：const 常量名 =</p>\n<p>🔹静态方法：静态方法无法访问变量，只能访问常量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static func XXX</span><br></pre></td></tr></table></figure>\n</blockquote>\n<hr>\n<h1 id=\"类和对象\"><a class=\"markdownIt-Anchor\" href=\"#类和对象\">#</a> 🔵类和对象</h1>\n<h2 id=\"类class\"><a class=\"markdownIt-Anchor\" href=\"#类class\">#</a> 🔷类 (class)</h2>\n<blockquote>\n<p>🔹类可以理解为对象的种类</p>\n<p>🔹定义一个类时，需要声明这个类下的对象需要拥有哪些数据</p>\n<p>🔹类的定义：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Class1: # 定义类“Class1”</span><br><span class=\"line\">\t# 默认会继承自Object</span><br><span class=\"line\">\t# extends Object</span><br><span class=\"line\">\t# 定义类下属性</span><br><span class=\"line\">\tvar Name:String</span><br><span class=\"line\">\tvar Data1:int</span><br><span class=\"line\">\tvar Data2:int</span><br><span class=\"line\">\tvar Data3:int</span><br><span class=\"line\">\t# 定义类下行为</span><br><span class=\"line\">\tfunc Action1():</span><br><span class=\"line\">\t\tprint(&quot;默认行为1&quot;)</span><br><span class=\"line\">\tfunc Action2():</span><br><span class=\"line\">\t\tprint(&quot;共有行为&quot;)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"对象object\"><a class=\"markdownIt-Anchor\" href=\"#对象object\">#</a> 🔷对象 (object)</h2>\n<blockquote>\n<p>🔹一个类下的具体事物</p>\n<blockquote>\n<p>如，现有如下类：</p>\n<ul>\n<li>动物</li>\n<li>汽车</li>\n</ul>\n<p>在类 &quot;动物&quot; 中，有以下类：</p>\n<ul>\n<li>狗</li>\n<li>猫</li>\n<li>……</li>\n</ul>\n<p>在类 &quot;汽车&quot; 中，有以下类：</p>\n<ul>\n<li>长安</li>\n<li>奔驰</li>\n<li>……</li>\n</ul>\n</blockquote>\n<p>🔹对象的定义：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class  Object1: # 定义对象&quot;Object1&quot;</span><br><span class=\"line\">\textends Class1 # 继承类：Class1</span><br><span class=\"line\">\t# 对象初始化</span><br><span class=\"line\">\tfunc _init(Name,Data1,Data2,Data3):# 读取创建该类对象时设定的数值</span><br><span class=\"line\">\t\tprint(&quot;对象Object1初始化&quot;)</span><br><span class=\"line\">\t\t# 赋值</span><br><span class=\"line\">\t\tself.Name = Name</span><br><span class=\"line\">\t\tself.Data1 = Data1</span><br><span class=\"line\">\t\tself.Data2 = Data2</span><br><span class=\"line\">\t\tself.Data3 = Data3</span><br><span class=\"line\">\t# 定义对象行为</span><br><span class=\"line\">\tfunc Action1():</span><br><span class=\"line\">\t\tprint(&quot;特殊行为1&quot;)</span><br><span class=\"line\">\tfunc Output():</span><br><span class=\"line\">\t\tprint(&quot;Name:&quot;+str(Name))</span><br><span class=\"line\">\t\tprint(&quot;Data1:&quot;+str(Data1))</span><br><span class=\"line\">\t\tprint(&quot;Data2:&quot;+str(Data2))</span><br><span class=\"line\">\t\tprint(&quot;Data3:&quot;+str(Data3))</span><br></pre></td></tr></table></figure>\n<div class=\"note info flat\"><p>在对象 &quot;Object1&quot; 中，我们再次定义了方法 &quot;Action1&quot;，这会覆盖所属类 &quot;Class1&quot; 中的 &quot;Action1&quot;，如果我们如 &quot;Action2&quot; 那般不重新定义的话，就会执行类默认的 &quot;Action1&quot;</p>\n</div>\n<p>🔹新建并调用对象：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var NewObject = Object1.new(&quot;Kanano&quot;,172,110,114514) # 新建新对象NewObject，对象类别为Obecjt1并为各属性赋值</span><br><span class=\"line\"># 调用对象下的各个方法</span><br><span class=\"line\">NewObject.Action1()</span><br><span class=\"line\">NewObject.Action2()</span><br><span class=\"line\">NewObject.Output()</span><br></pre></td></tr></table></figure>\n<p>最后输出结果为：<img src=\"https://pic.imgdb.cn/item/63bd6897be43e0d30e177c56.jpg\" alt=\"输出结果\"></p>\n</blockquote>\n<hr>\n<h1 id=\"语句\"><a class=\"markdownIt-Anchor\" href=\"#语句\">#</a> 🔵语句</h1>\n<h2 id=\"条件语句\"><a class=\"markdownIt-Anchor\" href=\"#条件语句\">#</a> 🔷条件语句</h2>\n<blockquote>\n<p>🔹if 语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (条件):</span><br><span class=\"line\">\t# 条件为true时执行</span><br><span class=\"line\">else if（条件2）:</span><br><span class=\"line\">\t# 条件2为true时执行</span><br><span class=\"line\">else:</span><br><span class=\"line\">\t# 条件均为false时执行</span><br></pre></td></tr></table></figure>\n<p>🔹match 语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;match （判定变量）:</span><br><span class=\"line\">\t判定值1:</span><br><span class=\"line\">\t\t成立时执行</span><br><span class=\"line\">\t判定值2:</span><br><span class=\"line\">\t\t成立时执行</span><br><span class=\"line\">\t\tcontinu # 继续往下匹配</span><br><span class=\"line\">\t……</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"循环语句\"><a class=\"markdownIt-Anchor\" href=\"#循环语句\">#</a> 🔷循环语句</h2>\n<blockquote>\n<p>🔹For：（确定循环次数时使用）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># for 1</span><br><span class=\"line\">for 循环用变量 in range (循环次数):</span><br><span class=\"line\">\t循环执行内容</span><br><span class=\"line\">\t# 循环变量从0开始计算，输出数值为0 ~ 次数-1</span><br><span class=\"line\">\t</span><br><span class=\"line\"># for 2</span><br><span class=\"line\">for 循环用变量 in [数组]</span><br><span class=\"line\">\t循环执行内容</span><br><span class=\"line\">\t# 循环用变量会依次输出为数组内内容</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Range 的用法：</p>\n<ul>\n<li>range (数字)：range (5)</li>\n<li>range (范围)：range (2, 5)</li>\n<li>range (范围，间隔)：range (0,6,2)</li>\n</ul>\n<p>输出为：</p>\n<ul>\n<li>[0,1,2,3,4]</li>\n<li>[2,3,4]</li>\n<li>[0,2,4]</li>\n</ul>\n<p><em>—— 参考自官方文档</em></p>\n</blockquote>\n<p>🔹while：（不确定循环次数时使用）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while 循环用变量 判定运算</span><br><span class=\"line\"># 例：</span><br><span class=\"line\">var Loop = 10 </span><br><span class=\"line\">while Loop != 0 # 只要Loop不等于0就一直执行</span><br><span class=\"line\">\tLoop -= 1 # 对变量进行运算，避免循环一直进行</span><br><span class=\"line\">\t循环执行内容</span><br></pre></td></tr></table></figure>\n<p>🔹在函数内循环结束前不会执行循环块后的语句，在下方代码中，for 语句结束前不会执行 loop 语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func _ready():</span><br><span class=\"line\">\tvar Loop2 = 3</span><br><span class=\"line\">\tfor Loop in range(2):</span><br><span class=\"line\">\t\tprint(&quot;for语句输出:&quot; + str(Loop))</span><br><span class=\"line\">\twhile Loop2 != 0:</span><br><span class=\"line\">\t\tLoop2 -= 1</span><br><span class=\"line\">\t\tprint(&quot;wile语句输出:&quot; + str(Loop2))</span><br><span class=\"line\">\tprint(&quot;函数结束&quot;)</span><br></pre></td></tr></table></figure>\n<p>输出结果为:<img src=\"https://pic.imgdb.cn/item/63bd4adbbe43e0d30ed4ef31.jpg\" alt=\"输出结果\"></p>\n<p>🔹break：满足条件后跳出循环，之后会继续执行之后的代码，例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for BreakTest in range(10):</span><br><span class=\"line\">\t\tif (BreakTest == 5):</span><br><span class=\"line\">\t\t\tprint(&quot;Break执行！&quot;)</span><br><span class=\"line\">\t\t\tbreak</span><br><span class=\"line\">\t\tprint(BreakTest)</span><br><span class=\"line\">\tprint(&quot;Break后执行&quot;)</span><br></pre></td></tr></table></figure>\n<p>输出结果为：<img src=\"https://pic.imgdb.cn/item/63bd4d0dbe43e0d30ed9360b.jpg\" alt=\"输出结果\"></p>\n<p>🔹continue：当满足 continue 的条件，则取消这一次的内容执行，然后继续执行循环</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for ContinueTest in range(5):</span><br><span class=\"line\">\tif (ContinueTest == 3):</span><br><span class=\"line\">\t\tcontinue</span><br><span class=\"line\">\tprint(ContinueTest)</span><br></pre></td></tr></table></figure>\n<p>输出结果为：<img src=\"https://pic.imgdb.cn/item/63bd4e2fbe43e0d30edb4a6b.jpg\" alt=\"输出结果\"></p>\n</blockquote>\n<hr>\n<h1 id=\"process和physics_process\"><a class=\"markdownIt-Anchor\" href=\"#process和physics_process\">#</a> 🔵process 和 physics_process</h1>\n<p>🔷<em>Godot 中的_process 相当于 Unity 中的 Update；_physice_process 相当于 FixedUpdate</em></p>\n<h2 id=\"_processdelta渲染帧\"><a class=\"markdownIt-Anchor\" href=\"#_processdelta渲染帧\">#</a> 🔷_process (delta)：渲染帧</h2>\n<blockquote>\n<p>🔹Godot 在渲染每一帧画面前，都会执行一遍该方法内的代码</p>\n<p>🔹该方法适用于模拟一些真实的、实时的情况，它可以最快的将变化反应到屏幕上，也是我们用的最多的一个方法</p>\n</blockquote>\n<h2 id=\"_physics_processdelta物理帧\"><a class=\"markdownIt-Anchor\" href=\"#_physics_processdelta物理帧\">#</a> 🔷_physics_process (delta)：物理帧</h2>\n<blockquote>\n<p>🔹Godot 的物理模拟是单独进行的，每次进行物理模拟的时候，没进行一次计算就是进行了一次物理帧，在物理帧之前会执行一次方法中的代码，因此<mark>它的执行间隔是固定的</mark></p>\n<p>🔹该方法常用于处理物理模拟方面的逻辑</p>\n<p>🔹由于执行间隔固定的特性，可以用于在不使用 Timer 节点的情况下自定义计时器</p>\n</blockquote>\n<hr>\n<h1 id=\"信号signal\"><a class=\"markdownIt-Anchor\" href=\"#信号signal\">#</a> 🔵信号 signal</h1>\n<div class=\"note info flat\"><p>4.0 写法和 3.x 不同，下文会以 4.0 为标准</p>\n</div>\n<p>🔷<em>Godot 引擎官方建议在游戏开发中更多的使用信号来完成模块或功能间的通信</em></p>\n<h2 id=\"使用信号的方法\"><a class=\"markdownIt-Anchor\" href=\"#使用信号的方法\">#</a> 🔷使用信号的方法</h2>\n<blockquote>\n<p>🔹方法 1：使用编辑器外部链接</p>\n<ul>\n<li>选中需要发射信号的节点（例：Button 节点）</li>\n<li>在右侧面板中找到 “节点” 面板，双击选择链接的信号（例：“pressed”）</li>\n<li>在弹出窗口中选择需要链接的节点，在下方输入需要链接的方法</li>\n</ul>\n<p>🔹方法 2：使用代码链接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 写法1</span><br><span class=\"line\">$发射信号的节点.connect(&quot;需要链接的信号&quot;,Callable(链接的节点,&quot;链接的方法&quot;))</span><br><span class=\"line\"># 例：</span><br><span class=\"line\">$Button2.connect(&quot;pressed&quot;,Callable(self,&quot;Button2&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\"># 写法2</span><br><span class=\"line\">$发射信号的节点.需要链接的信号.connect(Callable(链接的节点,&quot;链接的方法&quot;))</span><br><span class=\"line\"># 例：</span><br><span class=\"line\">$Button2.pressed.connect(Callable(self,&quot;Button3&quot;))</span><br></pre></td></tr></table></figure>\n<p>🔹<strong>更推荐使用代码进行链接，这样子链接更自由</strong></p>\n</blockquote>\n<h2 id=\"自定义信号\"><a class=\"markdownIt-Anchor\" href=\"#自定义信号\">#</a> 🔷自定义信号</h2>\n<blockquote>\n<p>🔹首先需要在发射信号的节点内声明发射的信号名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 声明自定义信号</span><br><span class=\"line\">signal 信号名(参数)</span><br></pre></td></tr></table></figure>\n<p>🔹接着发射信号，如果没有声明信号的话会报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 触发信号的可以是方法，也可以是if判定触发</span><br><span class=\"line\">emit_signal(&quot;信号名&quot;,参数)</span><br></pre></td></tr></table></figure>\n<p>🔹之后便可以用上面的方法链接信号</p>\n<p>🔹解绑信号：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 解除绑定信号</span><br><span class=\"line\">disconnect(&quot;信号名&quot;,参数)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<hr>\n<h1 id=\"await原yield\"><a class=\"markdownIt-Anchor\" href=\"#await原yield\">#</a> 🔵Await (原 yield)</h1>\n<div class=\"note info flat\"><p>在 4.0 中 yield 更新为 await，且不再需要和 resume 结合使用</p>\n</div>\n<p>🔷await 可以将当前方法挂起，等待指定信号后继续执行</p>\n<h2 id=\"用法1await-对象信号\"><a class=\"markdownIt-Anchor\" href=\"#用法1await-对象信号\">#</a> 🔷用法 1：await 对象。信号</h2>\n<blockquote>\n<p>🔹相当于 yield (对象，信号) 的形式</p>\n<p>🔹新建两个对象（案例中为两个 Button），编写如下两则代码，观察它们输出的变化：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 第一个对象</span><br><span class=\"line\">extends Button</span><br><span class=\"line\"></span><br><span class=\"line\">func _ready():</span><br><span class=\"line\">\t# 输出第一条信息</span><br><span class=\"line\">\tprint(&quot;Button1ready触发1&quot;)</span><br><span class=\"line\">\t# 输出第二条信息</span><br><span class=\"line\">\tprint(&quot;Button1ready触发2&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">func _pressed():</span><br><span class=\"line\">\tprint(&quot;Button1按下&quot;)</span><br><span class=\"line\">\t</span><br><span class=\"line\"># 第二个对象</span><br><span class=\"line\">extends Button</span><br><span class=\"line\"></span><br><span class=\"line\">func _ready():</span><br><span class=\"line\">\t# 输出第一条信息</span><br><span class=\"line\">\tprint(&quot;Button2ready触发1&quot;)</span><br><span class=\"line\">\t# 挂起</span><br><span class=\"line\">\tawait self.pressed # 等待接收自己的pressed信号</span><br><span class=\"line\">\t# 输出第二条信息</span><br><span class=\"line\">\tprint(&quot;Button2ready触发2&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># _pressed方法和上面的await没有关系，只是输出一条提示方便观察代码执行的顺序</span><br><span class=\"line\">func _pressed():</span><br><span class=\"line\">\tprint(&quot;Button2按下&quot;)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"用法2await-方法\"><a class=\"markdownIt-Anchor\" href=\"#用法2await-方法\">#</a> 🔷用法 2：await 方法</h2>\n<blockquote>\n<p>🔹可以挂起该方法后拉起另一个方法，对方执行完毕后返回该方法继续执行余下代码</p>\n<p>🔹示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extends Button</span><br><span class=\"line\"></span><br><span class=\"line\">func _ready():、</span><br><span class=\"line\">\t# 输出第一条信息</span><br><span class=\"line\">\tprint(&quot;Button1ready触发1&quot;)</span><br><span class=\"line\">\t# 挂起并拉起test()，等待对方执行完毕</span><br><span class=\"line\">\tawait test()</span><br><span class=\"line\">\t# 输出第二条信息</span><br><span class=\"line\">\tprint(&quot;Button1ready触发2&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">func test():</span><br><span class=\"line\">\t# 输出第一条信息</span><br><span class=\"line\">\tprint(&quot;test触发1&quot;)</span><br><span class=\"line\">\t# 创建一个计时器并等待计时完毕</span><br><span class=\"line\">\t# 这里只是为了演唱两条信息间的时间间隔，让我们更好观察等待的过程</span><br><span class=\"line\">\tawait get_tree().create_timer(1).timeout</span><br><span class=\"line\">\t# 输出信息提示该方法执行完毕</span><br><span class=\"line\">\tprint(&quot;test END&quot;)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<hr>\n<h1 id=\"进程thread\"><a class=\"markdownIt-Anchor\" href=\"#进程thread\">#</a> 🔵进程 Thread</h1>\n<blockquote>\n<p>🔹创建一个执行单元，需要用到内置的 Thread 类</p>\n<p>🔹在 4.0 中，Thread 的使用方法有所改变，由原来的四个参数改为了两个参数，分别为 Callable 和 Priority，如果需要调用的方法有需要接受数据的参数，可以用 Callable.bind 传递</p>\n<p>🔹新建一个按钮，输入以下代码，观察输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func _pressed():</span><br><span class=\"line\">\t# 新建一个进程Thread1</span><br><span class=\"line\">\tvar Thread1 = Thread.new()</span><br><span class=\"line\">\t# 启动Thread1，进程执行方法&quot;TheadTest&quot;，传递一个int：99，优先级为0</span><br><span class=\"line\">\tThread1.start(Callable(self,&quot;ThreadTest&quot;).bind(99),0)</span><br><span class=\"line\">\t# 输出进程ID</span><br><span class=\"line\">\tprint(Thread1.get_id())</span><br><span class=\"line\">\t# 输出进程是否在运行</span><br><span class=\"line\">\tprint(Thread1.is_alive())</span><br><span class=\"line\">\tprint()</span><br><span class=\"line\">\t# 等待进程结束</span><br><span class=\"line\">\tvar finish = Thread1.wait_to_finish()</span><br><span class=\"line\">\t# 输出返回值</span><br><span class=\"line\">\tprint(finish)</span><br><span class=\"line\">\t# 再次检查进程是否运行</span><br><span class=\"line\">\tprint(Thread1.is_alive())</span><br><span class=\"line\">\t</span><br><span class=\"line\"># 创建进程要执行的方法</span><br><span class=\"line\">func ThreadTest(abc):</span><br><span class=\"line\">\t# 输出提示信息</span><br><span class=\"line\">\tprint(&quot;test steat&quot;)</span><br><span class=\"line\">\t# 输出传递的参数</span><br><span class=\"line\">\tprint(abc)</span><br><span class=\"line\">\t# 返回一个参数</span><br><span class=\"line\">\treturn 9</span><br></pre></td></tr></table></figure>\n</blockquote>\n",
            "tags": [
                "Godot",
                "笔记"
            ]
        },
        {
            "id": "http://example.com/2023/01/06/%E3%80%90Godot%E3%80%912%E3%80%81%E8%8A%82%E7%82%B9/",
            "url": "http://example.com/2023/01/06/%E3%80%90Godot%E3%80%912%E3%80%81%E8%8A%82%E7%82%B9/",
            "title": "【Godot】2、节点",
            "date_published": "2023-01-06T12:00:00.000Z",
            "content_html": "<div class=\"note info flat\"><p>文章会持续更新，最近更新时间为：2023/01/14</p>\n</div>\n<h1 id=\"什么是节点\"><a class=\"markdownIt-Anchor\" href=\"#什么是节点\">#</a> 🔵什么是节点</h1>\n<blockquote>\n<p>🔹节点用于实现各种功能，例：Sprite 用于显示图片</p>\n<p>🔹一个子节点的功能可以继承给它的父节点</p>\n</blockquote>\n<hr>\n<h1 id=\"节点详解\"><a class=\"markdownIt-Anchor\" href=\"#节点详解\">#</a> 🔵节点详解</h1>\n<h2 id=\"node节点\"><a class=\"markdownIt-Anchor\" href=\"#node节点\">#</a> 🔷Node 节点</h2>\n<blockquote>\n<p>🔹Node 节点是所有节点的根基，Godot 所有节点都继承自 Node 节点，它们都拥有 Node 节点的功能</p>\n<p>🔹Node 节点通常用于挂载脚本</p>\n<p>🔹<strong>Script</strong>：用于挂脚本</p>\n<p>🔹<strong>Mode</strong>：当游戏暂停时的执行状态</p>\n<blockquote>\n<ul>\n<li>Inherit（继承）：继承父节点的处理方法</li>\n<li>Stop（停止）：暂停时该节点停止处理</li>\n<li>Process（处理）：暂停时继续处理</li>\n</ul>\n</blockquote>\n<p>🔹<strong>Priority</strong>：优先级，数字越低优先度越高</p>\n</blockquote>\n<h2 id=\"canvasltem\"><a class=\"markdownIt-Anchor\" href=\"#canvasltem\">#</a> 🔷Canvasltem</h2>\n<blockquote>\n<p>🔹Canvasltem 是直接继承自 Node 的一个节点，所有 2D 和 GUI 节点都继承于它</p>\n<p>🔹Canvasltem 可以被绘制节点，可以设置可视化界面和材质的颜色</p>\n<p>🔹通过设置 Show Behind Parent 可以改变最终渲染到屏幕上的画面顺序</p>\n<p>🔹CanvasItem 主要拥有这些属性：</p>\n<ul>\n<li>\n<p><strong>Texture</strong>：贴图，附加到附体表面的贴图</p>\n</li>\n<li>\n<p><strong>Material</strong>：材质，实际上就是 shade</p>\n</li>\n<li>\n<p><strong>Shader</strong>：着色器，使用代码来渲染图形</p>\n</li>\n</ul>\n<p>🔹在 CanvasItem 类中，常用的方法有：</p>\n<ul>\n<li>hide ()：隐藏对象</li>\n<li>show ()：显示对象</li>\n</ul>\n</blockquote>\n<h2 id=\"node2d\"><a class=\"markdownIt-Anchor\" href=\"#node2d\">#</a> 🔷Node2D</h2>\n<blockquote>\n<p>🔹Node2D 继承自 CanvasItem，因此在 Node2D 的检查器面板里可以看到 CanvasItem 及 Node 的设置项，以及 Node2D 自身的设置项</p>\n<p>🔹<strong>Transform</strong>：Node2D 节点的基本属性，在脚本编程中非常常用，它表示：</p>\n<ul>\n<li><strong>Position</strong>：位置</li>\n<li><strong>Rotation</strong>：旋转</li>\n<li><strong>Scale</strong>：缩放</li>\n</ul>\n<p>🔹<strong>Ordering</strong> 下的<strong> Z Index</strong>：相当于 3 维空间的 Z 轴便宜，也可以理解为数值越大渲染顺序越靠后</p>\n</blockquote>\n<h2 id=\"sprite\"><a class=\"markdownIt-Anchor\" href=\"#sprite\">#</a> 🔷Sprite</h2>\n<blockquote>\n<p>🔹Sprite 节点继承自 Node2D</p>\n<p>🔹最直接的作用就是显示图片</p>\n</blockquote>\n<hr>\n<h1 id=\"自定义节点\"><a class=\"markdownIt-Anchor\" href=\"#自定义节点\">#</a> 🔵自定义节点</h1>\n<blockquote>\n<p>🔹当现有节点无法满足需要时有两种解决方法：自定义节点、自定义脚本，但<mark>不管是哪种方法，核心都是脚本</mark></p>\n<p>🔹要自定义节点，先创建一个脚本，输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extends 要继承的父节点</span><br><span class=\"line\">Class_name 节点名字 &quot;节点图标路径&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#自定义节点的属性面板内容</span><br><span class=\"line\">export var……</span><br><span class=\"line\">#在4.0后应改为</span><br><span class=\"line\">@export var……</span><br></pre></td></tr></table></figure>\n</blockquote>\n<hr>\n<h1 id=\"owner和parent\"><a class=\"markdownIt-Anchor\" href=\"#owner和parent\">#</a> 🔵Owner 和 Parent</h1>\n<blockquote>\n<p>🔷<strong>parent</strong>：该节点的上一级节点</p>\n<p>🔷<strong>owner</strong>：该节点所在场景的最上级节点，如果该节点本身就是最上级，则结果为 &quot;null&quot;</p>\n<div class=\"note info flat\"><p>要获取 owner，只需要直接使用 owner 即可；例：var Owner = owner</p>\n</div>\n<div class=\"note info flat\"><p>动态创建的节点的 owner 为 null</p>\n</div>\n</blockquote>\n<hr>\n<h1 id=\"通过脚本操作节点\"><a class=\"markdownIt-Anchor\" href=\"#通过脚本操作节点\">#</a> 🔵通过脚本操作节点</h1>\n<h2 id=\"节点的获取\"><a class=\"markdownIt-Anchor\" href=\"#节点的获取\">#</a> 🔷节点的获取</h2>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 获取当前节点</span><br><span class=\"line\">var xxx = $&quot;.&quot;</span><br><span class=\"line\">var xxx = self</span><br><span class=\"line\"># 获取父节点</span><br><span class=\"line\">var xxx = $&quot;../&quot;</span><br><span class=\"line\">var xxx = get_parent() # 只能获取自己的上一级父节点</span><br><span class=\"line\"># 获取子节点</span><br><span class=\"line\">var xxx = $子节点名</span><br><span class=\"line\">var xxx = get_node(&quot;节点名&quot;)</span><br><span class=\"line\"># 根节点查找发：会返回在节点树里从上到下找到的第一个节点</span><br><span class=\"line\">var xxx = get_tree().root.find_node(&quot;节点名&quot;,true,false)</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果需要在方法外获取节点，需要在变量前加@onready</span><br><span class=\"line\">@onready var xxx = $...</span><br></pre></td></tr></table></figure>\n<div class=\"note info flat\"><p>get_node () 中，如果要获取的节点是脚本挂载节点的子节点，直接填写 &quot;子节点的名称&quot;，或者 &quot;子节点 / 子节点&quot;…… 如果不是，则可以填写 &quot;…/ 节点 / 节点 /……“或者&quot;root/……”（这类似 linux 中的文件路径）</p>\n</div>\n</blockquote>\n<h2 id=\"使用脚本添加并修改节点\"><a class=\"markdownIt-Anchor\" href=\"#使用脚本添加并修改节点\">#</a> 🔷使用脚本添加并修改节点</h2>\n<blockquote>\n<p>🔹在脚本中可以用类似创建对象的方式创建节点，并通过”add_child ()“添加进场景中</p>\n<p>🔹要更改节点中需要调用资源的属性（如贴图）时，需要先载入贴图再赋值</p>\n<p>🔹示例代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func _ready():</span><br><span class=\"line\">\t# 新建一个Sprite2D类型的新节点</span><br><span class=\"line\">\t# 这里的Mynode1不是节点的名字，而是一个变量名，是它的“识别码”</span><br><span class=\"line\">\tvar Mynode1 = Sprite2D.new()</span><br><span class=\"line\">\t# 添加进场景中</span><br><span class=\"line\">\tadd_child(Mynode1) </span><br><span class=\"line\">\t# 给节点重命名</span><br><span class=\"line\">\tMynode1.name = &quot;Mynode1&quot;</span><br><span class=\"line\">\t# 加载节点贴图，同样的“Texture_Mynode1”也是这张贴图在这个方法中的识别码</span><br><span class=\"line\">\tvar Texture_Mynode1 = preload(&quot;res://icon.svg&quot;)</span><br><span class=\"line\">\t# 更改贴图</span><br><span class=\"line\">\tMynode1.texture = Texture_Mynode1</span><br><span class=\"line\">\t# 更改位置</span><br><span class=\"line\">\tMynode1.position.x = 200</span><br><span class=\"line\">\tMynode1.position.y = 200 </span><br><span class=\"line\"></span><br><span class=\"line\">func _process(delta):</span><br><span class=\"line\">\t# 因为“Mynode1”是在“_ready&quot;方法内声明的，无法在该方法访问，故需要重新声明并关联</span><br><span class=\"line\">\tvar Mynode1 = $Mynode1</span><br><span class=\"line\">\t# 使用rotate函数进行旋转</span><br><span class=\"line\">\tMynode1.rotate(0.1)</span><br></pre></td></tr></table></figure></blockquote>\n",
            "tags": [
                "Godot",
                "笔记"
            ]
        },
        {
            "id": "http://example.com/2023/01/06/%E3%80%90Godot%E3%80%911%E3%80%81%E8%AE%A4%E8%AF%86Godot/",
            "url": "http://example.com/2023/01/06/%E3%80%90Godot%E3%80%911%E3%80%81%E8%AE%A4%E8%AF%86Godot/",
            "title": "【Godot】1、认识Godot",
            "date_published": "2023-01-06T04:00:00.000Z",
            "content_html": "<h1 id=\"🔵1-认识编辑器布局\"><a href=\"#🔵1-认识编辑器布局\" class=\"headerlink\" title=\"🔵1.认识编辑器布局\"></a>🔵1.认识编辑器布局</h1><hr>\n<p><img src=\"https://pic.imgdb.cn/item/63b7a7d2be43e0d30ee99a54.jpg\" alt=\"Godot界面\"></p>\n<h2 id=\"🔷左侧边栏\"><a href=\"#🔷左侧边栏\" class=\"headerlink\" title=\"🔷左侧边栏\"></a>🔷左侧边栏</h2><blockquote>\n<p>🔹<strong>文件系统</strong>（FileSystem）：显示当前项目中所有资源文件</p>\n<p>🔹<strong>导入</strong>（Import）：显示文件&#x3D;&#x3D;系统分栏中所选资源文件&#x3D;&#x3D;的导入设置</p>\n<p>🔹<strong>场景</strong>（Scene）：按照层级结构显示当前场景中所有节点，可以简单理解为一个游戏里的场景&#x2F;关卡</p>\n</blockquote>\n<h2 id=\"🔷右侧分栏\"><a href=\"#🔷右侧分栏\" class=\"headerlink\" title=\"🔷右侧分栏\"></a>🔷右侧分栏</h2><blockquote>\n<p>🔹<strong>检查器</strong>（Inspector）：显示&#x3D;&#x3D;场景分栏中所选节点&#x3D;&#x3D;的属性</p>\n<p>🔹<strong>节点</strong>（Node）：显示与&#x3D;&#x3D;场景分栏中所选节点&#x3D;&#x3D;对应的一些信息</p>\n</blockquote>\n<h2 id=\"🔷中间面板\"><a href=\"#🔷中间面板\" class=\"headerlink\" title=\"🔷中间面板\"></a>🔷中间面板</h2><blockquote>\n<ul>\n<li>2D：编辑2D场景的窗口</li>\n<li>3D：相对的用于编辑3D场景</li>\n<li>脚本（Script）：Godot内置的脚本编辑器，可以使用外置IDE替代</li>\n<li>资源库（AsseLib）：可以浏览搜索网络上的资源</li>\n</ul>\n</blockquote>\n<h2 id=\"🔷底部面板\"><a href=\"#🔷底部面板\" class=\"headerlink\" title=\"🔷底部面板\"></a>🔷底部面板</h2><blockquote>\n<ul>\n<li>调试控制台</li>\n<li>动画编辑器</li>\n<li>混音器</li>\n</ul>\n</blockquote>\n<h1 id=\"🔵2-认识游戏对象\"><a href=\"#🔵2-认识游戏对象\" class=\"headerlink\" title=\"🔵2.认识游戏对象\"></a>🔵2.认识游戏对象</h1><hr>\n<p>🔷<strong>游戏对象</strong>（Node）：即是场景里包含的一切内容，Godot的一切操作都是基于Node实现</p>\n<p>🔷所有节点都拥有以下特性</p>\n<blockquote>\n<ul>\n<li>可变更的名称</li>\n<li>可编辑的属性</li>\n<li>每帧都可以接受回调进行更新</li>\n<li>使用新的属性&#x2F;函数进行扩展</li>\n<li>可添加为其他节点的子节点</li>\n</ul>\n</blockquote>\n<div class=\"note info flat\"><p>节点会组成一棵树，不同节点拥有不同可能，组合在一起就可以产生复杂的行为</p>\n</div>\n\n<p>🔷在Godot中所有节点的坐标都是&#x3D;&#x3D;相对坐标&#x3D;&#x3D;，相对坐标和全局坐标都可以相互转化，如果想直接调节全局坐标，可以调节global_postion</p>\n<blockquote>\n<ul>\n<li>当子节点坐标为（0,0）时，和父节点相对距离为0，两节点重合<img src=\"https://pic.imgdb.cn/item/63b7c260be43e0d30e2c7a79.jpg\" alt=\"子节点坐标为（0,0）\"></li>\n<li>当子节点坐标为（100,100）时，子节点便会和父节点错开，此时的子节点世界坐标为(100+100&#x3D;200,100+100&#x3D;200)<img src=\"https://pic.imgdb.cn/item/63b7c3a0be43e0d30e2f1e20.jpg\" alt=\"子节点坐标为（100,100）\"></li>\n</ul>\n</blockquote>\n<div class=\"note info flat\"><p>需要注意的是，全局位置是以场景左上角为原点，而非根节点</p>\n</div>\n\n<h1 id=\"🔵3-节点的基础操作\"><a href=\"#🔵3-节点的基础操作\" class=\"headerlink\" title=\"🔵3.节点的基础操作\"></a>🔵3.节点的基础操作</h1><hr>\n<h2 id=\"🔷Q-选择工具\"><a href=\"#🔷Q-选择工具\" class=\"headerlink\" title=\"🔷Q 选择工具\"></a>🔷<kbd>Q</kbd> 选择工具</h2><blockquote>\n<ul>\n<li>按住<kbd>Alt</kbd>拖拽缩放点，保持选中目标中心不变进行缩放</li>\n<li>按住<kbd>Shift</kbd>等比缩放</li>\n<li>按住<kbd>Ctrl</kbd>可以进行旋转</li>\n</ul>\n</blockquote>\n<h2 id=\"🔷W-移动工具\"><a href=\"#🔷W-移动工具\" class=\"headerlink\" title=\"🔷W 移动工具\"></a>🔷<kbd>W</kbd> 移动工具</h2><h2 id=\"🔷R-移动工具\"><a href=\"#🔷R-移动工具\" class=\"headerlink\" title=\"🔷R 移动工具\"></a>🔷<kbd>R</kbd> 移动工具</h2><blockquote>\n<ul>\n<li><kbd>V</kbd> 移动轴心点；<kbd>Shift</kbd>+<kbd>V</kbd>拖拽轴心点</li>\n</ul>\n</blockquote>\n<h2 id=\"🔷S-缩放工具\"><a href=\"#🔷S-缩放工具\" class=\"headerlink\" title=\"🔷S 缩放工具\"></a>🔷<kbd>S</kbd> 缩放工具</h2><h2 id=\"🔷F-聚焦选取对象\"><a href=\"#🔷F-聚焦选取对象\" class=\"headerlink\" title=\"🔷F 聚焦选取对象\"></a>🔷<kbd>F</kbd> 聚焦选取对象</h2><h2 id=\"🔷多节点选择工具\"><a href=\"#🔷多节点选择工具\" class=\"headerlink\" title=\"🔷多节点选择工具\"></a>🔷多节点选择工具</h2><blockquote>\n<ul>\n<li>当节点间重叠时，可以使用该工具精确选定需要的节点</li>\n</ul>\n</blockquote>\n<h2 id=\"🔷吸附-amp-锁定节点\"><a href=\"#🔷吸附-amp-锁定节点\" class=\"headerlink\" title=\"🔷吸附 &amp; 锁定节点\"></a>🔷吸附 &amp; 锁定节点</h2><blockquote>\n<ul>\n<li><kbd>Shift</kbd>+<kbd>S</kbd> 打开智能吸附</li>\n<li><kbd>Shift</kbd>+<kbd>G</kbd> 打开网格吸附</li>\n</ul>\n<div class=\"note info flat\"><p>在Godot中对齐都是以轴心点为基准</p>\n</div>\n\n<ul>\n<li><kbd>Ctrl</kbd>+<kbd>L</kbd> 锁定节点</li>\n<li><kbd>Ctrl</kbd>+<kbd>G</kbd> 使子节点不可选中</li>\n</ul>\n</blockquote>\n",
            "tags": [
                "Godot",
                "笔记"
            ]
        },
        {
            "id": "http://example.com/2023/01/06/%E3%80%90Godot%E3%80%91%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7%E5%A4%87%E5%BF%98/",
            "url": "http://example.com/2023/01/06/%E3%80%90Godot%E3%80%91%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7%E5%A4%87%E5%BF%98/",
            "title": "【Godot】一些小技巧的备忘",
            "date_published": "2023-01-05T16:00:00.000Z",
            "content_html": "<h2 id=\"1图片的切割与合并\"><a class=\"markdownIt-Anchor\" href=\"#1图片的切割与合并\">#</a> 🔵1. 图片的切割与合并</h2>\n<h3 id=\"切割\"><a class=\"markdownIt-Anchor\" href=\"#切割\">#</a> 🔷切割</h3>\n<blockquote>\n<ul>\n<li>选中需要切割的图片，进入属性栏，勾选 Region-Enabled</li>\n<li>在底部面板选中 TextureRegion，Snap Mode 选择 Auto Slice，选出需要的区域</li>\n</ul>\n</blockquote>\n<h3 id=\"合并\"><a class=\"markdownIt-Anchor\" href=\"#合并\">#</a> 🔷合并</h3>\n<blockquote>\n<ul>\n<li>在文件系统面板选中需要合并的图片</li>\n<li>进入导入面板，设置为 Import as TextureAtlas，再勾选 Atlas File</li>\n<li>Reimport 后即可使用新素材</li>\n</ul>\n</blockquote>\n",
            "tags": [
                "Godot",
                "笔记"
            ]
        },
        {
            "id": "http://example.com/2023/01/05/%E3%80%90%E6%9D%82%E3%80%91%E6%88%91%E4%B8%8E%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AC%AC%E4%B8%80%E5%A4%A9/",
            "url": "http://example.com/2023/01/05/%E3%80%90%E6%9D%82%E3%80%91%E6%88%91%E4%B8%8E%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AC%AC%E4%B8%80%E5%A4%A9/",
            "title": "【杂】我与博客的第一天",
            "date_published": "2023-01-04T16:00:00.000Z",
            "content_html": "<p>大家好呀，这里是九奏<br>\n今天是下定决心从新开始的第一天，同时我创立了这个博客<br>\n现在域名还是默认的 https://kanano9.github.io，本来想给孩子买个域名的，但是因为去年不断出现的 3 分钟热度，对象都不让买了，啊哈（尴尬）<br>\n我会在这里上传我今后的学习笔记，以及一些可能的报告书等等<br>\n真希望等明年这个时候，这篇博客会在几十页开外的位置上<br>\n明天见！</p>\n",
            "tags": [
                "杂项"
            ]
        }
    ]
}